buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }     
   } 
   dependencies {
       classpath 'net.minecraftforge.gradle:ForgeGradle:2.1-SNAPSHOT'
                                                                                        }
}
apply plugin: 'net.minecraftforge.gradle.forge'



//plugins {
//    id "net.minecraftforge.gradle.forge" version "2.0.2"
//}

ext.configFile = file "build.properties"

configFile.withReader {
    def prop = new Properties()
    prop.load(it)
    project.ext.config = new ConfigSlurper().parse prop
}

task buildInfo {
    def cmd = "git rev-parse --short HEAD"
    def proc = cmd.execute()
    ext.sha = proc.text.trim()
}

task gitbranch {
    def cmd = "git rev-parse --abbrev-ref HEAD"
    def proc = cmd.execute()
    ext.branch = proc.text.trim()
}


if (System.getenv('BUILD_NUMBER') != null) {
    version = "${config.mc_version}-${config.mod_version}.${System.getenv('BUILD_NUMBER')}-1.8.8"
} else {
    version = "${config.mc_version}-${config.mod_version}.local.${project.buildInfo.sha}"
}
//version = "${config.mc_version}-${config.mod_version}"
group= "${config.group}"
archivesBaseName = "${config.name}"

minecraft {

    runDir = "run"
    mappings = "${config.mappings}"
	version = "${config.mc_version}-${config.forge_version}"


    replaceIn "LibIlly.java"
    replace '@VERSION@', project.version
}

processResources {
    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod/info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
    

    
//    task allJar(type: Jar) {
//        from sourceSets.main.allJava
//        classifier = 'source'
//    }
    


}

task sourcesJar(type: Jar, dependsOn: classes) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'deobf'
}

artifacts {
    archives deobfJar
    archives sourcesJar
}

repositories {
    mavenCentral()
}



